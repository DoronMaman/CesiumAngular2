{"version":3,"sources":["geo-utils.service.ts"],"names":[],"mappings":"AAAA,CAAC;AACD,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,aAAA,EAAc,MAAO,0BAAA,CAA2B;AAGzD;IAqBC,yBAAoB,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;IAChD,CAAC;IApBM,iDAAiC,GAAxC,UAAyC,eAAe,EAAE,aAAa,EAAE,aAAa,EAAE,gBAAwB;QAAxB,iCAAA,EAAA,wBAAwB;QAC/G,IAAM,QAAQ,GAAG,aAAa,GAAG,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,aAAa,CAAC;QACtE,IAAM,MAAM,GAAG,gBAAgB,GAAG,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,QAAQ,GAAG,eAAe,CAAC,QAAQ,CAAC;QACzH,IAAM,MAAM,GAAG,gBAAgB,GAAG,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,SAAS,GAAG,eAAe,CAAC,SAAS,CAAC;QAE3H,IAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAC/B,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;YACrC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,CAC/D,CAAC;QAEF,IAAI,cAAc,GAAG,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EACtG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAChE,CAAC;QAEH,cAAc,GAAG,CAAC,cAAc,GAAG,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC;QAE1E,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;IACtE,CAAC;IAKD,oDAA0B,GAA1B,UAA2B,SAAiC;QAC3D,IAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC;QACrD,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;IACxC,CAAC;IACK,0BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IAEK,8BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,aAAa,GAAG;KACtB,EAF6F,CAE7F,CAAC;IACF,sBAAC;CAnCD,AAmCC,IAAA;SAnCY,eAAe","file":"geo-utils.service.js","sourceRoot":"","sourcesContent":[";\r\nimport { Injectable } from '@angular/core';\r\nimport { CesiumService } from '../cesium/cesium.service';\r\n\r\n\r\nexport class GeoUtilsService {\r\n\r\n\tstatic pointByLocationDistanceAndAzimuth(currentLocation, meterDistance, radianAzimuth, isInputCartesian = false) {\r\n\t\tconst distance = meterDistance / Cesium.Ellipsoid.WGS84.maximumRadius;\r\n\t\tconst curLat = isInputCartesian ? Cesium.Cartographic.fromCartesian(currentLocation).latitude : currentLocation.latitude;\r\n\t\tconst curLon = isInputCartesian ? Cesium.Cartographic.fromCartesian(currentLocation).longitude : currentLocation.longitude;\r\n\r\n\t\tconst destinationLat = Math.asin(\r\n\t\t\tMath.sin(curLat) * Math.cos(distance) +\r\n\t\t\tMath.cos(curLat) * Math.sin(distance) * Math.cos(radianAzimuth)\r\n\t\t);\r\n\r\n\t\tlet destinationLon = curLon + Math.atan2(Math.sin(radianAzimuth) * Math.sin(distance) * Math.cos(curLat),\r\n\t\t\t\tMath.cos(distance) - Math.sin(curLat) * Math.sin(destinationLat)\r\n\t\t\t);\r\n\r\n\t\tdestinationLon = (destinationLon + 3 * Math.PI) % (2 * Math.PI) - Math.PI;\r\n\r\n\t\treturn Cesium.Cartesian3.fromRadians(destinationLon, destinationLat);\r\n\t}\r\n\r\n\tconstructor(private cesiumService: CesiumService) {\r\n\t}\r\n\r\n\tscreenPositionToCartesian3(screenPos: {x: number, y: number}) {\r\n\t\tconst camera = this.cesiumService.getViewer().camera;\r\n\t\treturn camera.pickEllipsoid(screenPos);\r\n\t}\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CesiumService, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}